genaiState:
  Type: AWS::StepFunctions::StateMachine
  Properties:
    StateMachineName: gen-ai-states-${self:provider.stage}
    StateMachineType: STANDARD
    RoleArn: !GetAtt statesRole.Arn

    LoggingConfiguration:
      Destinations:
        - CloudWatchLogsLogGroup:
            LogGroupArn: !GetAtt statesLogGroup.Arn
      IncludeExecutionData: true
      Level: ALL

    TracingConfiguration:
      Enabled: true

    Definition:
      Comment: "GEN AI Orquestation"
      StartAt: processItems
      States:
        processItems:
          Type: Map
          ItemsPath: "$"
          MaxConcurrency: 50
          Iterator:
            StartAt: parallelProcesor
            States:
              parallelProcesor:
                Type: Parallel
                OutputPath: "$[0]"
                End: true
                Branches:
                - StartAt: parseItem
                  States:
                    parseItem:
                      Type: Pass
                      Parameters:
                        messageId.$: $.messageId
                        body.$: "States.StringToJson($.body)"
                        executionTime.$: "$$.Execution.StartTime"
                        connectionId.$: $.messageAttributes.connectionId.stringValue
                      Next: Send Message to WebSocket Client

                    Send Message to WebSocket Client:
                      Type: Task          
                      Resource: arn:aws:states:::apigateway:invoke
                      Parameters:
                        ApiEndpoint: !Sub "${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com"
                        Method: POST
                        Stage: "${self:provider.stage}"
                        Path.$: "States.Format('/@connections/{}', $.connectionId)"
                        RequestBody:
                          Message.$: $
                        AuthType: IAM_ROLE
                      End: true
            
                - StartAt: Athena StartSyncExecution
                  States:
                    #insertItem:
                    #  Type: Task
                    #  Resource: arn:aws:states:::dynamodb:putItem
                    #  Parameters:
                    #    TableName: !Ref privateModel
                    #    Item:
                    #      idnot:
                    #        S.$: $.messageId
                    #      ownernot:
                    #        S.$: $.messageAttributes.connectionId.stringValue
                    #      body:
                    #        S.$: $.body
                    #  ResultPath: null
                    #  Next: Athena StartSyncExecution

                    Athena StartSyncExecution:
                      Type: Task
                      Resource: arn:aws:states:::athena:startQueryExecution.sync
                      Parameters:
                        #QueryString: "SELECT * FROM \"database1\".\"tabla1\" limit 1"
                        QueryString.$:  "States.Format('INSERT INTO tabla1 (messageid, eventsource, body, createdat)  VALUES (\\'{}\\', \\'{}\\', \\'{}\\', CURRENT_DATE);', $.messageId, $.eventSource, $.body)"    # "INSERT INTO \"database1\".\"tabla2\" VALUES ('$.messageId', '$.eventSource', '$.body')"
                        QueryExecutionContext:
                          Database: "database1"
                        WorkGroup: "primary"
                        ResultConfiguration:
                          OutputLocation: "s3://s3table-output-${self:provider.stage}/athena/"
                      ResultPath: "$.queryResult"
                      Next: ReturnTableItems

                    ReturnTableItems:
                      Type: Task
                      Resource: arn:aws:states:::athena:startQueryExecution.sync
                      Parameters:
                        QueryString: "SELECT * FROM tabla1;"
                        #QueryString.$:  "States.Format('INSERT INTO tabla1 (messageid, eventsource, body, createdat)  VALUES (\\'{}\\', \\'{}\\', \\'{}\\', CURRENT_DATE);', $.messageId, $.eventSource, $.body)"    # "INSERT INTO \"database1\".\"tabla2\" VALUES ('$.messageId', '$.eventSource', '$.body')"
                        QueryExecutionContext:
                          Database: "database1"
                        WorkGroup: "primary"
                        ResultConfiguration:
                          OutputLocation: "s3://s3table-output-${self:provider.stage}/athena/"
                      ResultPath: "$.queryResult"
                      Next: Send Message to WebSocket Client

                    Send Message to WebSocket Client:
                      Type: Task          
                      Resource: arn:aws:states:::apigateway:invoke
                      Parameters:
                        ApiEndpoint: !Sub "${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com"
                        Method: POST
                        Stage: "${self:provider.stage}"
                        Path.$: "States.Format('/@connections/{}', $.connectionId)"
                        RequestBody.$: $.queryResult
                        AuthType: IAM_ROLE
                      End: true

                    #createSession:
                    #  Type: Task
                    #  Resource: arn:aws:states:::lambda:invoke
                    #  Parameters:
                    #    FunctionName: arn:aws:lambda:${self:provider.region}:178934116267:function:gen-ai-service-${self:provider.stage}-createIteminTable
                    #    Payload.$: "$"
                    #  OutputPath: "$.Payload"
                    #  End: true   
          End: True

statesLogGroup:
  Type: AWS::Logs::LogGroup
  Properties:
    LogGroupName: !Join [ "/", [ "statesLogGroup_${self:provider.stage}", statesLogGroup]]
    RetentionInDays: 30