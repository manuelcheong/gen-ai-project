genaiState:
  Type: AWS::StepFunctions::StateMachine
  Properties:
    StateMachineName: gen-ai-states-${self:provider.stage}
    StateMachineType: STANDARD
    RoleArn: !GetAtt statesRole.Arn

    LoggingConfiguration:
      Destinations:
        - CloudWatchLogsLogGroup:
            LogGroupArn: !GetAtt statesLogGroup.Arn
      IncludeExecutionData: true
      Level: ALL

    TracingConfiguration:
      Enabled: true

    Definition:
      Comment: "GEN AI Orquestation to save analitycs in S3 tables"
      StartAt: parserInput
      States:
        parserInput:
          Type: Map
          ItemsPath: $
          #ResultPath: "$.items"
          MaxConcurrency: 100
          ItemProcessor:
            StartAt: parser
            States:
              parser:
                Type: Pass
                Parameters:
                  messageId.$: $.messageId
                  body.$: States.StringToJson($.body)
                  messageAttributes.$: $.messageAttributes
                  
                End: true
            ProcessorConfig:
              Mode: DISTRIBUTED
              ExecutionType: STANDARD
          Next: parallelFilterbyTables
        
              

        parallelFilterbyTables:
          Type: Parallel
          End: true
          Branches:
          - StartAt: filterPedidosPulseEcommerce
            States:
              filterPedidosPulseEcommerce: 
                Type: "Pass"
                InputPath: "$.[?(@.body.index == 'pedidos-pulse-ecom-pro')]"
                #InputPath: "$[?.body.index in ['pedidos-pulse-ecom-pro','pedidos-pulse-agg-pro']]"
                Next: "handleCommerceItem"


              handleCommerceItem:
                Type: Map
                End: true
                ItemsPath: $
                MaxConcurrency: 100
                ItemProcessor:
                  StartAt: Athena StartSyncExecution
                  States:
                    Athena StartSyncExecution:
                      Type: Task
                      Resource: arn:aws:states:::athena:startQueryExecution.sync
                      Parameters:
                        QueryString.$:  "States.Format('INSERT INTO dominos (messageid, eventsource, body, createdat, status, statustext, storeorderid, servicemethod, unidad, storeid)  VALUES (\\'{}\\', \\'{}\\', \\'{}\\', CURRENT_DATE, {}, \\'{}\\', \\'{}\\', \\'{}\\', \\'{}\\', {});', $.messageId, $.body.index, States.JsonToString($.body), $.body.body.Status, $.body.body.StatusText, $.body.body.StoreOrderID, $.body.body.ServiceMethod, $.body.body.Unidad, $.body.body.StoreID)"    # "INSERT INTO \"database1\".\"tabla2\" VALUES ('$.messageId', '$.eventSource', '$.body')"
                        QueryExecutionContext:
                          Database: "database1"
                        WorkGroup: "primary"
                        ResultConfiguration:
                          OutputLocation: "s3://s3table-output-${self:provider.stage}/athena/"
                      ResultPath: "$.queryResult"
                      End: true

          - StartAt: filterPedidosPulseAggregator
            States:
              filterPedidosPulseAggregator: 
                Type: "Pass"
                InputPath: "$.[?(@.body.index == 'pedidos-pulse-agg-pro')]"
                Next: "handleAggItem"
  
  
              handleAggItem:
                Type: Map
                End: true
                ItemsPath: $
                  #ResultPath: "$.items"
                MaxConcurrency: 100
                ItemProcessor:
                  StartAt: Athena StartSyncExecutionAgg
                  States:
                    Athena StartSyncExecutionAgg:
                      Type: Task
                      Resource: arn:aws:states:::athena:startQueryExecution.sync
                      Parameters:
                        QueryString.$:  "States.Format('INSERT INTO dominos (messageid, eventsource, body, createdat, status, statustext, storeorderid, servicemethod, unidad, storeid)  VALUES (\\'{}\\', \\'{}\\', \\'{}\\', CURRENT_DATE, {}, \\'{}\\', \\'{}\\', \\'{}\\', \\'{}\\', {});', $.messageId, $.body.index, States.JsonToString($.body), $.body.body.Status, $.body.body.StatusText, $.body.body.StoreID, $.body.body.ServiceMethod, $.body.body.Unidad, $.body.body.StoreID)"    # "INSERT INTO \"database1\".\"tabla2\" VALUES ('$.messageId', '$.eventSource', '$.body')"
                        QueryExecutionContext:
                          Database: "database1"
                        WorkGroup: "primary"
                        ResultConfiguration:
                          OutputLocation: "s3://s3table-output-${self:provider.stage}/athena/"
                      ResultPath: "$.queryResult"
                      End: true
                    
  
                #Athena StartSyncExecution:
                #  Type: Task
                #  Resource: arn:aws:states:::athena:startQueryExecution.sync
                #  Parameters:
                          #QueryString: "SELECT * FROM \"database1\".\"tabla1\" limit 1"
                #    QueryString.$:  "States.Format('INSERT INTO tabla1 (messageid, eventsource, body, createdat)  VALUES (\\'{}\\', \\'{}\\', \\'{}\\', CURRENT_DATE);', $.messageId, $.eventSource, $.body)"    # "INSERT INTO \"database1\".\"tabla2\" VALUES ('$.messageId', '$.eventSource', '$.body')"
                #    QueryExecutionContext:
                #      Database: "database1"
                #    WorkGroup: "primary"
                #    ResultConfiguration:
                #      OutputLocation: "s3://s3table-output-${self:provider.stage}/athena/"
                #  ResultPath: "$.queryResult"
                #  End: true

          - StartAt: filterCustomEvents
            States:
              filterCustomEvents: 
                Type: "Pass"
                InputPath: "$.[?(@.body.index == 'custom')]"
                Next: "handleCustomItems"

              handleCustomItems:
                Type: Map
                End: true
                ItemsPath: $
                MaxConcurrency: 100
                ItemProcessor:
                  StartAt: parseCustomItem
                  States:
                    parseCustomItem:
                      Type: Pass
                      Parameters:
                        messageId.$: $.messageId
                        body.$: "States.StringToJson($.body.body)"
                        executionTime.$: "$$.Execution.StartTime"
                        connectionId.$: $.messageAttributes.connectionId.stringValue
                      Next: Send Message to WebSocket Client

                    Send Message to WebSocket Client:
                      Type: Task          
                      Resource: arn:aws:states:::apigateway:invoke
                      Parameters:
                        ApiEndpoint: !Sub "${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com"
                        Method: POST
                        Stage: "${self:provider.stage}"
                        Path.$: "States.Format('/@connections/{}', $.connectionId)"
                        RequestBody:
                          Message.$: $
                        AuthType: IAM_ROLE
                      End: true
  
          - StartAt: filterEventToPromptBedrock
            States:
              filterEventToPromptBedrock: 
                Type: "Pass"
                InputPath: "$.[?(@.body.index == 'gen-prompt-content')]"
                Next: "handlePrompCustomItems"

              handlePrompCustomItems:
                Type: Map
                End: true
                ItemsPath: $
                MaxConcurrency: 10
                ItemProcessor:
                  StartAt: parsePromptItem
                  States:
                    parsePromptItem:
                      Type: Pass
                      Parameters:
                        messageId.$: $.messageId
                        body.$: "$.body.body"
                        executionTime.$: "$$.Execution.StartTime"
                        connectionId.$: $.messageAttributes.connectionId.stringValue
                      Next: invokeParser

                    invokeParser:
                      Type: Task
                      Resource: arn:aws:states:::lambda:invoke
                      Parameters:
                        FunctionName: arn:aws:lambda:${self:provider.region}:178934116267:function:gen-ai-service-${self:provider.stage}-scrapperrs
                        Payload.$: "$.body"
                      #OutputPath: "$.Payload"
                      ResultPath: "$.outputUrlContent"
                      Next: getContent

                    getContent:
                      Type: Task
                      Parameters:
                        Bucket.$: $.outputUrlContent.Payload.bucket   # gen-ai-content-${self:provider.stage}
                        Key.$: $.outputUrlContent.Payload.key   #"output123.txt"
                      ResultPath: "$.allContent"
                      Resource: arn:aws:states:::aws-sdk:s3:getObject
                      Next: promtBedrock

                    promtBedrock:
                      Type: Task
                      Resource: arn:aws:states:::bedrock:invokeModel
                      Parameters:
                        ModelId: "anthropic.claude-3-sonnet-20240229-v1:0" #arn:aws:bedrock:eu-west-1::foundation-model/anthropic.claude-3-sonnet-20240229-v1:0    #"anthropic.claude-3-5-sonnet-20240620-v1:0"
                        Body:
                          anthropic_version: "bedrock-2023-05-31"
                          messages:
                            - role: "user"
                              content:
                                - type: "text"
                                  #text.$: $.body.prompt
                                  text.$: "States.Format('Genera un resumen promocional con este contenido:  {}', $.allContent.Body)"
                          max_tokens: 500
                        
                      ResultPath: $.genContent
                      Next: Send Message to WebSocket Client Prompt

                      #"Parameters": {
                      #    "ModelId": "arn:aws:bedrock:eu-west-1::foundation-model/anthropic.claude-3-sonnet-20240229-v1:0",
                      #    "Input": {
                      #      "S3Uri.$": "$.inputS3"
                      #    }
                      #  }

                    Send Message to WebSocket Client Prompt:
                      Type: Task          
                      Resource: arn:aws:states:::apigateway:invoke
                      Parameters:
                        ApiEndpoint: !Sub "${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com"
                        Method: POST
                        Stage: "${self:provider.stage}"
                        Path.$: "States.Format('/@connections/{}', $.connectionId)"
                        RequestBody:
                          Message.$: $.genContent
                        AuthType: IAM_ROLE
                      End: true
    
          - StartAt: filterNotificationEmail
            States:
              filterNotificationEmail: 
                Type: "Pass"
                InputPath: "$.[?(@.body.index == 'notification-email')]"
                Next: "handleNotificationsEmail"


              handleNotificationsEmail:
                Type: Map
                End: true
                ItemsPath: $
                MaxConcurrency: 10
                ItemProcessor:
                  StartAt: parseNotificationItem
                  States:
                    parseNotificationItem:
                      Type: Pass
                      Parameters:
                        body.$: "$.body.body"
                      Next: sendEmail

                    sendEmail:
                      Type: Task
                      Resource: arn:aws:states:::aws-sdk:ses:sendEmail
                      End: true
                      Parameters:
                        Source: "$.from"
                        Destination:
                          ToAddresses:
                            - "$.to"
                        Message:
                          Subject:
                            Data: "$.subject"
                          Body:
                            Html:
                              Data.$: "$.data"


      #  processItems:
      #    Type: Map
      #    ItemsPath: "$"   # "ItemsPath": "$.data[?(@.type == 'important')]"
      #    MaxConcurrency: 50
      #    Iterator:
      #      StartAt: parallelProcesor
      #      States:
      #        parallelProcesor:
      #          Type: Parallel
      #          OutputPath: "$[0]"
      #          End: true
      #          Branches:
      #          - StartAt: parseItem
      #            States:
      #              parseItem:
      #                Type: Pass
      #                Parameters:
      #                  messageId.$: $.messageId
      #                  body.$: "States.StringToJson($.body)"
      #                  executionTime.$: "$$.Execution.StartTime"
      #                  connectionId.$: $.messageAttributes.connectionId.stringValue
      #                Next: Send Message to WebSocket Client

      #              Send Message to WebSocket Client:
      #                Type: Task          
      #                Resource: arn:aws:states:::apigateway:invoke
      #                Parameters:
      #                  ApiEndpoint: !Sub "${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com"
      #                  Method: POST
      #                  Stage: "${self:provider.stage}"
      #                  Path.$: "States.Format('/@connections/{}', $.connectionId)"
      #                  RequestBody:
      #                    Message.$: $
      ##                  AuthType: IAM_ROLE
      #                End: true
            
      #          - StartAt: Athena StartSyncExecution
      #            States:
                    #insertItem:
                    #  Type: Task
                    #  Resource: arn:aws:states:::dynamodb:putItem
                    #  Parameters:
                    #    TableName: !Ref privateModel
                    #    Item:
                    #      idnot:
                    #        S.$: $.messageId
                    #      ownernot:
                    #        S.$: $.messageAttributes.connectionId.stringValue
                    #      body:
                    #        S.$: $.body
                    #  ResultPath: null
                    #  Next: Athena StartSyncExecution

                    

      #              ReturnTableItems:
      #                Type: Task
      #                Resource: arn:aws:states:::athena:startQueryExecution.sync
      #                Parameters:
      #                  QueryString: "SELECT * FROM tabla1;"
                        #QueryString.$:  "States.Format('INSERT INTO tabla1 (messageid, eventsource, body, createdat)  VALUES (\\'{}\\', \\'{}\\', \\'{}\\', CURRENT_DATE);', $.messageId, $.eventSource, $.body)"    # "INSERT INTO \"database1\".\"tabla2\" VALUES ('$.messageId', '$.eventSource', '$.body')"
      #                  QueryExecutionContext:
      #                    Database: "database1"
      #                  WorkGroup: "primary"
      #                  ResultConfiguration:
      #                    OutputLocation: "s3://s3table-output-${self:provider.stage}/athena/"
      #                ResultPath: "$.queryResult"
      #                End: true

                    #Return Items to WebSocket Client:
                    #  Type: Task          
                    #  Resource: arn:aws:states:::apigateway:invoke
                    #  Parameters:
                    #    ApiEndpoint: !Sub "${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com"
                    #    Method: POST
                    #    Stage: "${self:provider.stage}"
                    #    Path.$: "States.Format('/@connections/{}', $.messageAttributes.connectionId.stringValue)"
                    #    RequestBody.$: $.queryResult
                    #    AuthType: IAM_ROLE
                    #  End: true

                    #createSession:
                    #  Type: Task
                    #  Resource: arn:aws:states:::lambda:invoke
                    #  Parameters:
                    #    FunctionName: arn:aws:lambda:${self:provider.region}:178934116267:function:gen-ai-service-${self:provider.stage}-createIteminTable
                    #    Payload.$: "$"
                    #  OutputPath: "$.Payload"
                    #  End: true   


                    #"Get query results": {
                    #  "Resource": "arn:aws:states:::athena:getQueryResults",
                    #  "Arguments": {
                    #    "QueryExecutionId": "{% $states.input.QueryExecution.QueryExecutionId %}"
                    #  },
                    #  "Type": "Task",
                    #  "Next": "Send query results"
                    #},
                    #"Send query results": {
                    #  "Resource": "arn:aws:states:::sns:publish",
                    #  "Arguments": {
                    #    "TopicArn": "arn:aws:sns:eu-west-1:<ACCOUNT_ID>:MySnsTopic",
                    #    "Message": {
                    #      "Input": "{% $states.input.ResultSet.Rows %}"
                    #    }
                    #  },
                    #  "Type": "Task",
                    #  "End": true
                    #}
          #End: True

statesLogGroup:
  Type: AWS::Logs::LogGroup
  Properties:
    LogGroupName: !Join [ "/", [ "statesLogGroup_${self:provider.stage}", statesLogGroup]]
    RetentionInDays: 30